
==================== FINAL INTERFACE ====================
2018-03-09 08:12:08.329521 UTC

interface CripH_6c6QSyYgErH80S6dnRE85H:Vigenere 7103
  interface hash: 5256f8151e1111c90af830a88a91db30
  ABI hash: bb43bfd38430eff78a71b8c8d401ed25
  export-list hash: df95a66363393110de50e8aaa5c8b9af
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4c0a7b65a6dddbc4161c2e2bfabe3dc3
  sig of: Nothing
  used TH splices: False
  where
exports:
  Vigenere.mensajeOclaveV
  Vigenere.prop_CorreccionVigenere
  Vigenere.repite
  Vigenere.vigenereF
  Vigenere.vigenereG
module dependencies: Asociacion1 Generadores
package dependencies: QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0*
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL template-haskell-2.10.0.0
                      tf-random-0.5@tfran_1eLmkn3WUnC8NZpPuDLGKF
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
import  -/  Asociacion1 7b26843ace7bd8fe186746353ab290d2
  exports: 7db8fe3eaac51f331a6e6dfa0abc57b4
  int2char 0d7529783d2cb375c8e9b8d22c1a028a
  str2int 23f590a1111fd984fc0822842485dd88
import  -/  Generadores 2defa8c3b976da9db3197c8db2d45db5
  exports: 9c24a9f6675b7e81b0dcac4f05a0c3f6
  genLetra 98cfc5b0af4c671688687f1de353ce86
import  -/  QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD:Test.QuickCheck 7e615a40a74c9052467718d8c88a3cda
import  -/  QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD:Test.QuickCheck.Gen 06f68a423d098fdb51859fed401c5be6
import  -/  QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD:Test.QuickCheck.Property 2d09f2ef07ce3d8d7d5d68d4a6d952e3
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
6d7a43af5bfa4e9c94d9dd1885510eb3
  mensajeOclaveV :: Test.QuickCheck.Gen.Gen GHC.Base.String
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                Vigenere.mensajeOclaveV1
                  `cast`
                (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <[GHC.Types.Char]>_R)) -}
8ed147cfd11e009e94fdcbc080509433
  mensajeOclaveV1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (Test.QuickCheck.Gen.listOf3
                   @ GHC.Types.Char
                   Generadores.genLetra) -}
28d53332b81a665a8e063a2e6aa94664
  prop_CorreccionVigenere :: Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: InlineRule (0, True, True)
                Vigenere.prop_CorreccionVigenere1
                  `cast`
                (Trans
                     (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <Test.QuickCheck.Property.Prop>_R))
                     (Sym (Test.QuickCheck.Property.NTCo:Property[0]))) -}
af7f379c7430a3a0bcbb6d3668dca1bf
  prop_CorreccionVigenere1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Test.QuickCheck.Property.Prop
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: (\ eta :: Test.QuickCheck.Random.QCGen
                   eta1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 let {
                   x :: GHC.Base.String
                   = Test.QuickCheck.Gen.listOf3
                       @ GHC.Types.Char
                       Generadores.genLetra
                       (case ds1 of wild { (,) g1 g2 ->
                        g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                       eta1
                 } in
                 (Test.QuickCheck.Property.counterexample
                    @ Test.QuickCheck.Property.Property
                    Test.QuickCheck.Property.$fTestableProperty
                    (GHC.Types.:
                       @ GHC.Types.Char
                       GHC.Show.shows6
                       (GHC.Show.showLitString x Vigenere.prop_CorreccionVigenere2))
                    (\ eta2 :: Test.QuickCheck.Random.QCGen eta3 :: GHC.Types.Int ->
                     let {
                       ds2 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                       = case eta2
                                `cast`
                              (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                         case System.Random.TF.Gen.$wtfGenSplit
                                ww1
                                ww2
                                ww3
                                ww4 of ww7 { (#,#) ww8 ww9 ->
                         (ww8, ww9) } }
                     } in
                     let {
                       x1 :: GHC.Base.String
                       = Test.QuickCheck.Gen.listOf3
                           @ GHC.Types.Char
                           Generadores.genLetra
                           (case ds2 of wild { (,) g1 g2 ->
                            g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                           eta3
                     } in
                     (Test.QuickCheck.Property.counterexample_$scounterexample1
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (GHC.Show.showLitString x1 Vigenere.prop_CorreccionVigenere2))
                        (GHC.Base.eqString
                           x1
                           (Vigenere.vigenereG x (Vigenere.vigenereF x x1))))
                       `cast`
                     (Trans
                          (Test.QuickCheck.Property.NTCo:Property[0])
                          (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <Test.QuickCheck.Property.Prop>_R))
                       (case ds2 of wild { (,) g1 g2 ->
                        g2 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                       eta3)
                      `cast`
                    (Trans
                         (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                   <Test.QuickCheck.Property.Prop>_R))
                         (Sym (Test.QuickCheck.Property.NTCo:Property[0]))))
                   `cast`
                 (Trans
                      (Test.QuickCheck.Property.NTCo:Property[0])
                      (Test.QuickCheck.Gen.NTCo:Gen[0]
                           <Test.QuickCheck.Property.Prop>_R))
                   (case ds1 of wild { (,) g1 g2 ->
                    g2 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                   eta1) -}
005f7baa3355afdabbaef89f653aadec
  prop_CorreccionVigenere2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9edec0bc2bc8f26fdc90ae40b0bd02e5
  repite :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GHC.Base.String ->
                 letrec {
                   xs :: [GHC.Types.Char]
                   = GHC.Base.augment
                       @ GHC.Types.Char
                       (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                        GHC.Base.foldr @ GHC.Types.Char @ b c n x)
                       xs
                 } in
                 xs) -}
ad01fbb985b17c51bd342b812d95f84a
  vigenereF :: GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ k :: GHC.Base.String m :: GHC.Base.String ->
                 Vigenere.vigenereF_go
                   m
                   (letrec {
                      xs :: [GHC.Types.Int]
                      = letrec {
                          go :: [GHC.Types.Char] -> [GHC.Types.Int]
                            {- Arity: 1, Strictness: <S,1*U> -}
                          = \ ds :: [GHC.Types.Char] ->
                            case ds of wild {
                              [] -> xs
                              : y ys
                              -> GHC.Types.: @ GHC.Types.Int (Asociacion1.char2int y) (go ys) }
                        } in
                        go k
                    } in
                    xs)) -}
c766daa06da4d43163423d4caff7f1d3
  vigenereF_go ::
    [GHC.Types.Char] -> [GHC.Types.Int] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
7a248f9ecff3823fb5ba6dfd14f2e406
  vigenereG :: GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ k :: GHC.Base.String m' :: GHC.Base.String ->
                 Vigenere.vigenereG_go
                   m'
                   (letrec {
                      xs :: [GHC.Types.Int]
                      = letrec {
                          go :: [GHC.Types.Char] -> [GHC.Types.Int]
                            {- Arity: 1, Strictness: <S,1*U> -}
                          = \ ds :: [GHC.Types.Char] ->
                            case ds of wild {
                              [] -> xs
                              : y ys
                              -> GHC.Types.: @ GHC.Types.Int (Asociacion1.char2int y) (go ys) }
                        } in
                        go k
                    } in
                    xs)) -}
0a1f44c8cad5d9d0bdc3175ab9f2259c
  vigenereG_go ::
    [GHC.Types.Char] -> [GHC.Types.Int] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

