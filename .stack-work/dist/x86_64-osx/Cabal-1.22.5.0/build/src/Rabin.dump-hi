
==================== FINAL INTERFACE ====================
2018-03-09 08:12:03.687181 UTC

interface CripH_6c6QSyYgErH80S6dnRE85H:Rabin 7103
  interface hash: b8b7fd065e7c8c3e7ef12a2caafa1320
  ABI hash: 7f7e48a5078accfc42e24e6750f7b5d1
  export-list hash: 17ebaa58293e547072308d67d37a4ab3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1394e30f9499a31cadefc3b6752b8f13
  sig of: Nothing
  used TH splices: False
  where
exports:
  Rabin.choose'
  Rabin.clavesPubyPrivRabin
  Rabin.desencriptaRabin
  Rabin.desencriptaRabin1
  Rabin.encriptaRabin
  Rabin.encriptaRabin1
  Rabin.prim3Mod4
  Rabin.prop_CorrecRabin
module dependencies: Asociacion4
package dependencies: DRBG-0.5.5@DRBG_AL4n35dWZmVJX33U3VHYlQ
                      QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD
                      RSA-2.2.0@RSA_2kQDtYGiLqcDYftIzF1lWs
                      SHA-1.6.4.2@SHA_0ooW8jYoKWjDUFkZlEvhJX
                      arithmoi-0.4.2.0@arith_FAxqgFQd9xLHklfP2QDenN
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      asn1-encoding-0.9.4@asn1e_GjVUzUVKBTNFV6Xymtko28
                      asn1-types-0.3.2@asn1t_1wIythtYS1MCLmALwCnyOY base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      cereal-0.5.2.0@cerea_GKnWyxn5hRWK9xfCMeMEL8
                      cipher-aes128-0.7.0.1@ciphe_BG5MSNo4EzX9XGJ2hVeM9O
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      cryptohash-cryptoapi-0.1.4@crypt_1kIkiT9wUO22wFXlGHpGMQ
                      crypto-pubkey-types-0.4.3@crypt_CtDZHgfiKBDCqbP4NASMtB
                      cryptonite-0.15@crypt_F8W9M5THBW4FIZAr1UOHUh
                      crypto-api-0.13.2@crypt_GAe4aPlSVmU85G1MLJlJcV
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      entropy-0.3.7@entro_7gYJ61Ci0NNBp8LB4CGmrG
                      extra-1.4.9@extra_GLba7J4fXMPJnoudTaNKi6
                      fail-4.9.0.0@fail_2xB1AvdW34sDm9N3JOe33G ghc-prim-0.4.0.0
                      hourglass-0.2.10@hourg_LCfvpegcEVDEeuH0foNCGl integer-gmp-1.0.0.0
                      memory-0.13@memor_AtLbf837cOS9kNhIuRhbe8
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      parallel-3.2.1.0@paral_BEbrIfHgHtmEpYU5TfKWK9
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      pureMD5-2.1.3@pureM_5T9Io3zynb2A0FkLA6nQqE
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6 template-haskell-2.10.0.0
                      tf-random-0.5@tfran_1eLmkn3WUnC8NZpPuDLGKF
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
orphans: DRBG-0.5.5@DRBG_AL4n35dWZmVJX33U3VHYlQ:Crypto.Random.DRBG
         RSA-2.2.0@RSA_2kQDtYGiLqcDYftIzF1lWs:Codec.Crypto.RSA.Pure
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         cipher-aes128-0.7.0.1@ciphe_BG5MSNo4EzX9XGJ2hVeM9O:Crypto.Cipher.AES128
         crypto-api-0.13.2@crypt_GAe4aPlSVmU85G1MLJlJcV:Crypto.Classes
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
import  -/  Asociacion4 8115bdbfbaf106dab3ed7087c99a4631
  exports: 7c019090f4e502e9c5d59c8af1ef1e56
  integerToStr 1a26ff42a06eabf54f956c74f999ef46
  strToInteger 1a01714e1f1350ff0aac98183d2eff8c
import  -/  DRBG-0.5.5@DRBG_AL4n35dWZmVJX33U3VHYlQ:Crypto.Random.DRBG fe152fea19a5862a84671342841d3c0d
import  -/  QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD:Test.QuickCheck 7e615a40a74c9052467718d8c88a3cda
import  -/  QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD:Test.QuickCheck.Property 2d09f2ef07ce3d8d7d5d68d4a6d952e3
import  -/  RSA-2.2.0@RSA_2kQDtYGiLqcDYftIzF1lWs:Codec.Crypto.RSA.Exceptions 14dc50649ee52bc0c70f0e1b42b29b8a
import  -/  arithmoi-0.4.2.0@arith_FAxqgFQd9xLHklfP2QDenN:Math.NumberTheory.Moduli 5653de8bb6b06d499817b594c19480b0
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.IO bb5b81adcea33b14bd4abe16d7dde45f
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO.Unsafe fc45e72b9d9eb2c797a8c81f5821fcd0
import  -/  crypto-api-0.13.2@crypt_GAe4aPlSVmU85G1MLJlJcV:Crypto.Random 71a0b5ed5966d1a72ef95f433efb6fda
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
import  -/  random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL:System.Random d515be7800d601546639722a30f2fed4
e6c0d0565c0577bdfc30fbebc4ef303b
  $w$sprim3Mod4 ::
    GHC.Types.Int
    -> GHC.Integer.Type.Integer
    -> Crypto.Random.DRBG.GenAutoReseed
         Crypto.Random.DRBG.HashDRBG Crypto.Random.DRBG.HashDRBG
    -> GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <L,U(U)><S,U><L,U>, Inline: [0] -}
f203d080d7f83b828f837079a6993a2d
  $wdesencriptaRabin ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> [GHC.Base.String]
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Integer.Type.Integer
                   ww1 :: GHC.Integer.Type.Integer
                   ww2 :: GHC.Integer.Type.Integer
                   ww3 :: GHC.Integer.Type.Integer
                   w :: GHC.Base.String ->
                 let {
                   e_2 :: GHC.Integer.Type.Integer
                   = GHC.Integer.Type.divInteger ww3 Rabin.choose'1
                 } in
                 letrec {
                   go :: [GHC.Integer.Type.Integer] -> [GHC.Base.String]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [GHC.Integer.Type.Integer] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Base.String
                       : y ys
                       -> GHC.Types.:
                            @ GHC.Base.String
                            (case GHC.Integer.Type.eqInteger#
                                    ww2
                                    Rabin.desencriptaRabin4 of wild1 { DEFAULT ->
                             case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 of wild2 {
                               GHC.Types.False
                               -> Asociacion4.integerToStr
                                    (GHC.Integer.Type.modInteger
                                       (GHC.Integer.Type.minusInteger y e_2)
                                       ww2)
                               GHC.Types.True
                               -> case GHC.Real.divZeroError ret_ty GHC.Base.String of {} } })
                            (go ys) }
                 } in
                 go
                   (Math.NumberTheory.Moduli.sqrtModFList
                      (case GHC.Integer.Type.eqInteger#
                              ww2
                              Rabin.desencriptaRabin4 of wild { DEFAULT ->
                       case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                         GHC.Types.False
                         -> GHC.Integer.Type.modInteger
                              (GHC.Integer.Type.plusInteger
                                 (Asociacion4.strToInteger w)
                                 (GHC.Integer.Type.divInteger
                                    (GHC.Integer.Type.timesInteger ww3 ww3)
                                    Rabin.desencriptaRabin3))
                              ww2
                         GHC.Types.True
                         -> GHC.Real.divZeroError @ GHC.Integer.Type.Integer } })
                      (GHC.Types.:
                         @ (GHC.Integer.Type.Integer, GHC.Types.Int)
                         (ww, Rabin.desencriptaRabin2)
                         (GHC.Types.:
                            @ (GHC.Integer.Type.Integer, GHC.Types.Int)
                            (ww1, Rabin.desencriptaRabin2)
                            (GHC.Types.[] @ (GHC.Integer.Type.Integer, GHC.Types.Int)))))) -}
61aab067cf3da28860bd57a4bfadea9a
  $wdesencriptaRabin1 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> [GHC.Base.String]
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ t
                   ww :: GHC.Integer.Type.Integer
                   ww1 :: GHC.Integer.Type.Integer
                   ww2 :: GHC.Integer.Type.Integer
                   w :: GHC.Base.String ->
                 letrec {
                   go :: [GHC.Integer.Type.Integer] -> [GHC.Base.String]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [GHC.Integer.Type.Integer] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Base.String
                       : y ys
                       -> GHC.Types.:
                            @ GHC.Base.String
                            (Asociacion4.integerToStr (GHC.Real.$fIntegralInteger_$cmod y ww2))
                            (go ys) }
                 } in
                 go
                   (Math.NumberTheory.Moduli.sqrtModFList
                      (Asociacion4.strToInteger w)
                      (GHC.Types.:
                         @ (GHC.Integer.Type.Integer, GHC.Types.Int)
                         (ww, Rabin.desencriptaRabin2)
                         (GHC.Types.:
                            @ (GHC.Integer.Type.Integer, GHC.Types.Int)
                            (ww1, Rabin.desencriptaRabin2)
                            (GHC.Types.[] @ (GHC.Integer.Type.Integer, GHC.Types.Int)))))) -}
0824b4414b685956aa20c18583e13ad0
  $wencriptaRabin ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Integer.Type.Integer
                   ww1 :: GHC.Integer.Type.Integer
                   w :: GHC.Base.String ->
                 case GHC.Integer.Type.eqInteger#
                        ww
                        Rabin.desencriptaRabin4 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> let {
                        m :: GHC.Integer.Type.Integer = Asociacion4.strToInteger w
                      } in
                      Asociacion4.integerToStr
                        (GHC.Integer.Type.modInteger
                           (GHC.Integer.Type.timesInteger
                              m
                              (GHC.Integer.Type.plusInteger m ww1))
                           ww)
                   GHC.Types.True
                   -> case GHC.Real.divZeroError ret_ty GHC.Base.String of {} } }) -}
458cbeaf2ce9b285f257eaa9f4baf542
  $wencriptaRabin1 ::
    GHC.Integer.Type.Integer -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ t
                   ww :: GHC.Integer.Type.Integer
                   w :: GHC.Base.String ->
                 case GHC.Integer.Type.eqInteger#
                        ww
                        Rabin.desencriptaRabin4 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> let {
                        m :: GHC.Integer.Type.Integer = Asociacion4.strToInteger w
                      } in
                      Asociacion4.integerToStr
                        (GHC.Integer.Type.modInteger
                           (GHC.Integer.Type.timesInteger m m)
                           ww)
                   GHC.Types.True
                   -> case GHC.Real.divZeroError ret_ty GHC.Base.String of {} } }) -}
d582708b75bfc1b372347bca924f595d
  $wprim3Mod4 ::
    Crypto.Random.CryptoRandomGen t =>
    GHC.Types.Int
    -> GHC.Integer.Type.Integer -> t -> GHC.Integer.Type.Integer
  {- Arity: 4,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A,A)><L,U(U)><S,U><L,U>,
     Inline: [0] -}
30cce84af04a1f59febc2abe08f19349
  choose' :: (GHC.Real.Integral a, System.Random.Random a) => a -> a
  {- Arity: 3,
     Strictness: <L,U(1*U,A,A,A,1*C1(C1(U)),A,A,A,A)><L,1*U(1*C1(C1(U)),A,A,A,A,A)><L,U>,
     Unfolding: (\ @ a
                   $dIntegral :: GHC.Real.Integral a
                   $dRandom :: System.Random.Random a
                   n :: a ->
                 GHC.IO.unsafeDupablePerformIO
                   @ a
                   (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                    case System.Random.theStdGen
                           `cast`
                         (GHC.IORef.NTCo:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                    let {
                      f :: System.Random.StdGen -> (a, System.Random.StdGen)
                      = System.Random.randomR
                          @ a
                          $dRandom
                          @ System.Random.StdGen
                          System.Random.$fRandomGenStdGen
                          (let {
                             a1 :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                           } in
                           let {
                             $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a a1
                           } in
                           (GHC.Num.fromInteger @ a $dNum Rabin.choose'_a3,
                            GHC.Real.div
                              @ a
                              $dIntegral
                              n
                              (GHC.Num.fromInteger @ a $dNum Rabin.choose'1)))
                    } in
                    case GHC.Prim.atomicModifyMutVar#
                           @ GHC.Prim.RealWorld
                           @ System.Random.StdGen
                           @ (System.Random.StdGen, a)
                           @ a
                           r#
                           (\ a3 :: System.Random.StdGen ->
                            case f a3 of wild1 { (,) v g ->
                            case g of a'1 { System.Random.StdGen ipv ipv1 -> (a'1, v) } })
                           s' of ds1 { (#,#) ipv ipv1 ->
                    case ipv1 of b1 { DEFAULT -> ds1 } } } })
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <a>_R))) -}
2be5dbc6e7cb8b51d17e8c8cd1bb3973
  choose'1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 2) -}
038bd1573b7287c694e17308a5646c71
  choose'_$schoose' :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ n :: GHC.Types.Int ->
                 GHC.IO.unsafeDupablePerformIO
                   @ GHC.Types.Int
                   (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                    case System.Random.theStdGen
                           `cast`
                         (GHC.IORef.NTCo:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                    let {
                      a2 :: GHC.Integer.Type.Integer
                      = case n of ww { GHC.Types.I# ww1 ->
                        case GHC.Classes.divInt# ww1 2 of ww4 { DEFAULT ->
                        GHC.Integer.Type.smallInteger ww4 } }
                    } in
                    case GHC.Prim.atomicModifyMutVar#
                           @ GHC.Prim.RealWorld
                           @ System.Random.StdGen
                           @ (System.Random.StdGen, GHC.Types.Int)
                           @ GHC.Types.Int
                           r#
                           (\ a3 :: System.Random.StdGen ->
                            case System.Random.$wrandomIvalInteger
                                   @ System.Random.StdGen
                                   @ GHC.Types.Int
                                   System.Random.$fRandomGenStdGen
                                   GHC.Num.$fNumInt
                                   Rabin.choose'_a3
                                   a2
                                   a3 of ww2 { (#,#) ww3 ww4 ->
                            case ww4 of a'1 { System.Random.StdGen ipv ipv1 -> (a'1, ww3) } })
                           s' of ds1 { (#,#) ipv ipv1 ->
                    case ipv1 of b1 { GHC.Types.I# ipv2 -> ds1 } } } })
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Int>_R))) -}
cee3d948c9dbbbe1ba5bb9db5485419a
  choose'_a3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 1) -}
a022393ff4a693cecb62fad98882230b
  clavesPubyPrivRabin ::
    GHC.Types.Int
    -> ((GHC.Integer.Type.Integer, GHC.Integer.Type.Integer),
        (GHC.Integer.Type.Integer,
         GHC.Integer.Type.Integer,
         GHC.Integer.Type.Integer,
         GHC.Integer.Type.Integer))
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: (\ n :: GHC.Types.Int ->
                 let {
                   lvl2 :: GHC.Types.Int
                   = case Rabin.choose'_$schoose' n of wild1 { GHC.Types.I# y ->
                     GHC.Types.I# (GHC.Prim.*# 2 y) }
                 } in
                 GHC.IO.unsafeDupablePerformIO
                   @ ((GHC.Integer.Type.Integer, GHC.Integer.Type.Integer),
                      (GHC.Integer.Type.Integer,
                       GHC.Integer.Type.Integer,
                       GHC.Integer.Type.Integer,
                       GHC.Integer.Type.Integer))
                   (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                    case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                    case Crypto.Random.DRBG.$fCryptoRandomGenGenAutoReseed14
                           s' of ds1 { (#,#) ipv ipv1 ->
                    case Crypto.Random.DRBG.$fCryptoRandomGenGenAutoReseed14
                           ipv of ds2 { (#,#) ipv2 ipv3 ->
                    (# ipv2,
                       let {
                         q :: GHC.Integer.Type.Integer
                         = case Codec.Crypto.RSA.Pure.largeRandomPrime
                                  @ (Crypto.Random.DRBG.GenAutoReseed
                                       Crypto.Random.DRBG.HashDRBG Crypto.Random.DRBG.HashDRBG)
                                  Crypto.Random.DRBG.$fCryptoRandomGenGenAutoReseed_$s$fCryptoRandomGenGenAutoReseed2
                                  ipv3
                                  n of wild {
                             Data.Either.Left e1
                             -> case Rabin.clavesPubyPrivRabin1 e1
                                ret_ty GHC.Integer.Type.Integer
                                of {}
                             Data.Either.Right a2
                             -> case a2 of ww { (,) ww1 ww2 -> Rabin.$w$sprim3Mod4 n ww1 ww2 } }
                       } in
                       let {
                         p :: GHC.Integer.Type.Integer
                         = case Codec.Crypto.RSA.Pure.largeRandomPrime
                                  @ (Crypto.Random.DRBG.GenAutoReseed
                                       Crypto.Random.DRBG.HashDRBG Crypto.Random.DRBG.HashDRBG)
                                  Crypto.Random.DRBG.$fCryptoRandomGenGenAutoReseed_$s$fCryptoRandomGenGenAutoReseed2
                                  ipv1
                                  n of wild {
                             Data.Either.Left e1
                             -> case Rabin.clavesPubyPrivRabin1 e1
                                ret_ty GHC.Integer.Type.Integer
                                of {}
                             Data.Either.Right a2
                             -> case a2 of ww { (,) ww1 ww2 -> Rabin.$w$sprim3Mod4 n ww1 ww2 } }
                       } in
                       let {
                         n' :: GHC.Integer.Type.Integer = GHC.Integer.Type.timesInteger p q
                       } in
                       ((n',
                         case lvl2 of wild { GHC.Types.I# i ->
                         GHC.Integer.Type.smallInteger i }),
                        (p,
                         q,
                         n',
                         case lvl2 of wild { GHC.Types.I# i ->
                         GHC.Integer.Type.smallInteger i })) #) } } })
                     `cast`
                   (Sym (GHC.Types.NTCo:IO[0]
                             <((GHC.Integer.Type.Integer, GHC.Integer.Type.Integer),
                               (GHC.Integer.Type.Integer,
                                GHC.Integer.Type.Integer,
                                GHC.Integer.Type.Integer,
                                GHC.Integer.Type.Integer))>_R))) -}
42e0db3b55631e4429f4a24cbb9d25f2
  clavesPubyPrivRabin1 ::
    Codec.Crypto.RSA.Pure.RSAError
    -> (GHC.Integer.Type.Integer,
        Crypto.Random.DRBG.GenAutoReseed
          Crypto.Random.DRBG.HashDRBG Crypto.Random.DRBG.HashDRBG)
  {- Arity: 1, Strictness: <L,U>b -}
0ddfb92c902cb9ceb883a4b39c4cac9a
  desencriptaRabin ::
    (GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer)
    -> GHC.Base.String -> [GHC.Base.String]
  {- Arity: 2, Strictness: <S,1*U(U,U,U,U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (GHC.Integer.Type.Integer,
                         GHC.Integer.Type.Integer,
                         GHC.Integer.Type.Integer,
                         GHC.Integer.Type.Integer)
                   w1 :: GHC.Base.String ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 Rabin.$wdesencriptaRabin ww1 ww2 ww3 ww4 w1 }) -}
308d1494e5d50c8ccc5019dacb7b9bce
  desencriptaRabin1 ::
    (GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer,
     GHC.Integer.Type.Integer,
     t)
    -> GHC.Base.String -> [GHC.Base.String]
  {- Arity: 2, Strictness: <S,1*U(U,U,U,A)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ t
                   w :: (GHC.Integer.Type.Integer,
                         GHC.Integer.Type.Integer,
                         GHC.Integer.Type.Integer,
                         t)
                   w1 :: GHC.Base.String ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 Rabin.$wdesencriptaRabin1 @ t ww1 ww2 ww3 w1 }) -}
8424ed097c253b2d081e3d57c2fe2ebb
  desencriptaRabin2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
2b2f6e1cec2d817fafb90800c1b9de16
  desencriptaRabin3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 4) -}
00f9364b6a323f8dbc2723413d1210da
  desencriptaRabin4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
cf84c3d69b0dcf3a4fc8d51e955c35d7
  encriptaRabin ::
    (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
                   w1 :: GHC.Base.String ->
                 case w of ww { (,) ww1 ww2 ->
                 Rabin.$wencriptaRabin ww1 ww2 w1 }) -}
a2f94a25a89c07be48a8447b1d51158b
  encriptaRabin1 ::
    (GHC.Integer.Type.Integer, t) -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S(SL),1*U(U,A)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ t w :: (GHC.Integer.Type.Integer, t) w1 :: GHC.Base.String ->
                 case w of ww { (,) ww1 ww2 ->
                 Rabin.$wencriptaRabin1 @ t ww1 w1 }) -}
1e75206e4cd130f59e7d472865188992
  prim3Mod4 ::
    Crypto.Random.CryptoRandomGen t =>
    GHC.Types.Int
    -> (GHC.Integer.Type.Integer, t) -> GHC.Integer.Type.Integer
  {- Arity: 3,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A,A)><L,U(U)><S(SL),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   w :: Crypto.Random.CryptoRandomGen t
                   w1 :: GHC.Types.Int
                   w2 :: (GHC.Integer.Type.Integer, t) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 Rabin.$wprim3Mod4 @ t w w1 ww1 ww2 }) -}
4b8ef8ae1d1f7350a42426a8269c76ed
  prop_CorrecRabin ::
    GHC.Types.Int
    -> GHC.Base.String -> Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ x :: GHC.Types.Int m :: GHC.Base.String ->
                 case GHC.Classes.$fEq[]_$s$c==1
                        m
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False
                   -> case x of wild1 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# 0 y) of wild2 {
                        GHC.Types.False
                        -> Test.QuickCheck.Property.$fTestableDiscard2
                             `cast`
                           (Trans
                                (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                          (Test.QuickCheck.Property.NTCo:Prop[0])))
                                (Sym (Test.QuickCheck.Property.NTCo:Property[0])))
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# y 30) of wild3 {
                             GHC.Types.False
                             -> Test.QuickCheck.Property.$fTestableDiscard2
                                  `cast`
                                (Trans
                                     (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                               (Test.QuickCheck.Property.NTCo:Prop[0])))
                                     (Sym (Test.QuickCheck.Property.NTCo:Property[0])))
                             GHC.Types.True
                             -> case m of wild4 {
                                  []
                                  -> case GHC.List.badHead
                                     ret_ty Test.QuickCheck.Property.Property
                                     of {}
                                  : x1 ds1
                                  -> case x1 of wild5 { GHC.Types.C# c# ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.># (GHC.Prim.ord# c#) 0) of wild6 {
                                       GHC.Types.False
                                       -> Test.QuickCheck.Property.$fTestableDiscard2
                                            `cast`
                                          (Trans
                                               (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                                         (Test.QuickCheck.Property.NTCo:Prop[0])))
                                               (Sym (Test.QuickCheck.Property.NTCo:Property[0])))
                                       GHC.Types.True
                                       -> case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 wild4
                                                 0 of ww2 { DEFAULT ->
                                          case Rabin.clavesPubyPrivRabin
                                                 wild1 of wild7 { (,) ds ds2 ->
                                          case ds of wild8 { (,) a b ->
                                          case ds2 of wild9 { (,,,) c d e f ->
                                          case GHC.Show.$w$cshowsPrec1
                                                 0
                                                 a
                                                 (GHC.Types.[]
                                                    @ GHC.Types.Char) of ww1 { (#,#) ww3 ww4 ->
                                          case GHC.List.$wlenAcc
                                                 @ GHC.Types.Char
                                                 (GHC.Types.: @ GHC.Types.Char ww3 ww4)
                                                 0 of ww5 { DEFAULT ->
                                          case GHC.Classes.divInt# ww5 3 of ww6 { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<# ww2 ww6) of wild10 {
                                            GHC.Types.False
                                            -> Test.QuickCheck.Property.$fTestableDiscard2
                                                 `cast`
                                               (Trans
                                                    (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                                              (Test.QuickCheck.Property.NTCo:Prop[0])))
                                                    (Sym (Test.QuickCheck.Property.NTCo:Property[0])))
                                            GHC.Types.True
                                            -> let {
                                                 a5 :: Test.QuickCheck.Property.Rose
                                                         Test.QuickCheck.Property.Result
                                                 = Test.QuickCheck.Property.protectResults
                                                     (Test.QuickCheck.Property.MkRose
                                                        @ Test.QuickCheck.Property.Result
                                                        (case GHC.List.elem
                                                                @ GHC.Base.String
                                                                GHC.Classes.$fEq[]_$s$fEq[]1
                                                                wild4
                                                                (Rabin.$wdesencriptaRabin
                                                                   c
                                                                   d
                                                                   e
                                                                   f
                                                                   (Rabin.$wencriptaRabin
                                                                      a
                                                                      b
                                                                      wild4)) of wild11 {
                                                           GHC.Types.False
                                                           -> Test.QuickCheck.Property.counterexample9
                                                           GHC.Types.True
                                                           -> Test.QuickCheck.Property.succeeded })
                                                        (GHC.Types.[]
                                                           @ (Test.QuickCheck.Property.Rose
                                                                Test.QuickCheck.Property.Result)))
                                               } in
                                               (\ ds3 :: Test.QuickCheck.Random.QCGen
                                                  ds4 :: GHC.Types.Int ->
                                                a5)
                                                 `cast`
                                               (Trans
                                                    (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                                              (Test.QuickCheck.Property.NTCo:Prop[0])))
                                                    (Sym (Test.QuickCheck.Property.NTCo:Property[0]))) } } } } } } } } } } } } } }
                   GHC.Types.True
                   -> Test.QuickCheck.Property.$fTestableDiscard2
                        `cast`
                      (Trans
                           (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                                     (Test.QuickCheck.Property.NTCo:Prop[0])))
                           (Sym (Test.QuickCheck.Property.NTCo:Property[0]))) }) -}
"SPEC choose' @ Int" [ALWAYS] forall $dIntegral :: GHC.Real.Integral
                                                     GHC.Types.Int
                                     $dRandom :: System.Random.Random GHC.Types.Int
  Rabin.choose' @ GHC.Types.Int $dIntegral $dRandom
  = Rabin.choose'_$schoose'
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

