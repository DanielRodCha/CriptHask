
==================== FINAL INTERFACE ====================
2018-03-09 08:12:07.661614 UTC

interface CripH_6c6QSyYgErH80S6dnRE85H:Permutaciones 7103
  interface hash: a79e28d1fcb10e3aea066f7a8ec2a23c
  ABI hash: ca6eff24d60fd0a962109c2ef477fb2b
  export-list hash: fdb561ee3f5f63a3dfbda591888e058a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4c0a7b65a6dddbc4161c2e2bfabe3dc3
  sig of: Nothing
  used TH splices: False
  where
exports:
  Permutaciones.mensajeYclavePerm
  Permutaciones.ordena
  Permutaciones.permuta
  Permutaciones.permutaInv
  Permutaciones.permutacion
  Permutaciones.permutacionF
  Permutaciones.permutacionG
  Permutaciones.prop_CorreccionPerm
module dependencies: Asociacion1 Generadores
package dependencies: QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0*
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL template-haskell-2.10.0.0
                      tf-random-0.5@tfran_1eLmkn3WUnC8NZpPuDLGKF
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
import  -/  Generadores 2defa8c3b976da9db3197c8db2d45db5
  exports: 9c24a9f6675b7e81b0dcac4f05a0c3f6
  mensaje 8f7d4b319dbe775ba6d0b67a6457a491
import  -/  QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD:Test.QuickCheck 7e615a40a74c9052467718d8c88a3cda
import  -/  QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD:Test.QuickCheck.Gen 06f68a423d098fdb51859fed401c5be6
import  -/  QuickCheck-2.8.2@Quick_6TxL5Cx3o2p0HsyT59KWiD:Test.QuickCheck.Property 2d09f2ef07ce3d8d7d5d68d4a6d952e3
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
3142db5dd1339f1a6199fe888c050452
  $wa ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> (# GHC.Base.String, [GHC.Types.Int] #)
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ w :: Test.QuickCheck.Random.QCGen
                   w1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case w `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 (# Test.QuickCheck.Gen.listOf2
                      @ GHC.Types.Char
                      Generadores.genLetra
                      (case ds1 of wild { (,) g1 g2 ->
                       g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                      w1,
                    Permutaciones.mensajeYclavePerm2
                      (case ds1 of wild { (,) g1 g2 ->
                       case g2 of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) } } })
                      w1 #)) -}
8a4dedbfb8a198750685d05dd72173b0
  mensajeYclavePerm ::
    Test.QuickCheck.Gen.Gen (GHC.Base.String, [GHC.Types.Int])
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Permutaciones.mensajeYclavePerm1
                  `cast`
                (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                          <(GHC.Base.String, [GHC.Types.Int])>_R)) -}
1e84012f4021d4b7dd6ec62cab2d1f86
  mensajeYclavePerm1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> (GHC.Base.String, [GHC.Types.Int])
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Test.QuickCheck.Random.QCGen w1 :: GHC.Types.Int ->
                 case Permutaciones.$wa w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
38e5b2e909c721cad63b8f653c3b1474
  mensajeYclavePerm2 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ r :: Test.QuickCheck.Random.QCGen
                   n :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case r `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 (Test.QuickCheck.Gen.shuffle
                    @ GHC.Types.Int
                    (case System.Random.$wrandomIvalInteger
                            @ Test.QuickCheck.Random.QCGen
                            @ GHC.Types.Int
                            Test.QuickCheck.Random.$fRandomGenQCGen
                            GHC.Num.$fNumInt
                            Permutaciones.mensajeYclavePerm4
                            Permutaciones.mensajeYclavePerm3
                            (case ds1 of wild { (,) g1 g2 ->
                             g1
                               `cast`
                             (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) }) of ww2 { (#,#) ww3 ww4 ->
                     case ww3 of wild1 { GHC.Types.I# y -> GHC.Enum.eftInt 1 y } }))
                   `cast`
                 (Test.QuickCheck.Gen.NTCo:Gen[0] <[GHC.Types.Int]>_R)
                   (case ds1 of wild { (,) g1 g2 ->
                    g2 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                   n) -}
570f9ea82771833d7dc1d0783e3ced7b
  mensajeYclavePerm3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 6) -}
5e5116380b8f7d30a27eeb50c51d0026
  mensajeYclavePerm4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 2) -}
dd7b5779dbf578bdfa98a066188d2a44
  ordena :: GHC.Classes.Ord a => [(a, b)] -> [b]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(U)),C(C1(U)),A,A,A)><S,1*U> -}
16594f263d7fc621cf761bf8859d6b52
  ordena_$sordena :: [(GHC.Types.Int, b)] -> [b]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
35956d94e967ba5e08b43d10e8bbf696
  permuta :: [GHC.Types.Int] -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ns :: [GHC.Types.Int] xs :: [a] ->
                 Permutaciones.ordena_$sordena
                   @ a
                   (GHC.Base.build
                      @ (GHC.Types.Int, a)
                      (\ @ b1
                         c :: (GHC.Types.Int, a) -> b1 -> b1[OneShot]
                         n :: b1[OneShot] ->
                       GHC.List.foldr2
                         @ GHC.Types.Int
                         @ a
                         @ b1
                         (GHC.List.zipFB @ GHC.Types.Int @ a @ b1 @ b1 c)
                         n
                         ns
                         xs))) -}
3f8364b4dd473f70057b5ec4d395a517
  permutaInv :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ns :: [GHC.Types.Int] ->
                 Permutaciones.permuta
                   @ GHC.Types.Int
                   ns
                   Permutaciones.permutaInv1) -}
c8b780c52aee68e397ff87a9a3cbc878
  permutaInv1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 1 9223372036854775807) -}
36b8c29b6a17072d21293c475f2b2a6f
  permutacion :: Test.QuickCheck.Gen.Gen [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Permutaciones.mensajeYclavePerm2
                  `cast`
                (Sym (Test.QuickCheck.Gen.NTCo:Gen[0] <[GHC.Types.Int]>_R)) -}
b521ea06e29073c6c84cb4058c1dd509
  permutacionF ::
    [GHC.Types.Int] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
22999e03b50825f2fb7976e90b498939
  permutacionG ::
    [GHC.Types.Int] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ks :: [GHC.Types.Int] ->
                 Permutaciones.permutacionF (Permutaciones.permutaInv ks)) -}
568e03373563f15563473ef5420cf64a
  prop_CorreccionPerm :: Test.QuickCheck.Property.Property
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: InlineRule (0, True, True)
                Permutaciones.prop_CorreccionPerm1
                  `cast`
                (Trans
                     (Sym (Test.QuickCheck.Gen.NTCo:Gen[0]
                               <Test.QuickCheck.Property.Prop>_R))
                     (Sym (Test.QuickCheck.Property.NTCo:Property[0]))) -}
fe83915a8b591e00b9ade42309bf0b09
  prop_CorreccionPerm1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Test.QuickCheck.Property.Prop
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,U(U)>,
     Unfolding: (\ eta :: Test.QuickCheck.Random.QCGen
                   eta1 :: GHC.Types.Int ->
                 let {
                   ds1 :: (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.NTCo:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 let {
                   x :: (GHC.Base.String, [GHC.Types.Int])
                   = case Permutaciones.$wa
                            (case ds1 of wild { (,) g1 g2 ->
                             g1 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                            eta1 of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 (Test.QuickCheck.Property.counterexample_$scounterexample1
                    (case x of ww { (,) ww1 ww2 ->
                     GHC.Types.:
                       @ GHC.Types.Char
                       GHC.Show.shows9
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.shows6
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows6
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showList__1
                                   (GHC.Show.$fShow(,)_$sgo
                                      (\ eta2 :: GHC.Base.String ->
                                       GHC.Show.shows_$cshowList1 ww2 eta2)
                                      (GHC.Types.[] @ GHC.Show.ShowS)
                                      Permutaciones.prop_CorreccionPerm2))))) })
                    (case x of wild { (,) m k ->
                     GHC.Base.eqString
                       m
                       (Permutaciones.permutacionF
                          (Permutaciones.ordena_$sordena
                             @ GHC.Types.Int
                             (GHC.List.zip
                                @ GHC.Types.Int
                                @ GHC.Types.Int
                                k
                                Permutaciones.permutaInv1))
                          (Permutaciones.permutacionF k m)) }))
                   `cast`
                 (Trans
                      (Test.QuickCheck.Property.NTCo:Property[0])
                      (Test.QuickCheck.Gen.NTCo:Gen[0]
                           <Test.QuickCheck.Property.Prop>_R))
                   (case ds1 of wild { (,) g1 g2 ->
                    g2 `cast` (Sym (Test.QuickCheck.Random.NTCo:QCGen[0])) })
                   eta1) -}
5f3802b72bda4652dfa9aa345b76c754
  prop_CorreccionPerm2 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows8
                   (GHC.Types.[] @ GHC.Types.Char)) -}
"SPEC ordena @ Int _" [ALWAYS] forall @ b
                                      $dOrd :: GHC.Classes.Ord GHC.Types.Int
  Permutaciones.ordena @ GHC.Types.Int @ b $dOrd
  = Permutaciones.ordena_$sordena @ b
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

