
==================== FINAL INTERFACE ====================
2018-03-09 08:08:51.506283 UTC

interface tools_3VVSfwRhtQOBrJAbe7B7f3:ToolShed.System.Random 7103
  interface hash: 28edf2cb1327321db5167ebcdac73ab3
  ABI hash: e5966ed9a4e0a956e72b214ab684d6ae
  export-list hash: a5867efd5b73e8a61959471087c7debf
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f2871a51255fa4ba3a02e95eeadeb323
  sig of: Nothing
  used TH splices: False
  where
exports:
  ToolShed.System.Random.generateSelection
  ToolShed.System.Random.generateSelectionFromBounded
  ToolShed.System.Random.randomGens
  ToolShed.System.Random.select
  ToolShed.System.Random.shuffle
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU*
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL*
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
import  -/  base-4.8.2.0:Control.Arrow ab7f126fed349de468f94ac777dc8f4e
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence 19a5c0e6065ce32f3e90ed9004271e06
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL:System.Random d515be7800d601546639722a30f2fed4
f39c98e759e464e11d8831508e75d63e
  $wrandomGens ::
    System.Random.RandomGen randomGen =>
    randomGen -> (# randomGen, [randomGen] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(A,A,C(U(U,U)))><L,U>,
     Inline: [0] -}
a8681f67f8ed2bae2c9171c3cebe2a43
  generateSelection ::
    System.Random.RandomGen randomGen => randomGen -> [a] -> [a]
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U><S,1*U>,
     Unfolding: (\ @ randomGen
                   @ a
                   $dRandomGen :: System.Random.RandomGen randomGen
                   ds :: randomGen
                   ds1 :: [a] ->
                 case ds1 of wild {
                   [] -> ToolShed.System.Random.generateSelection1 @ a
                   : x ds2
                   -> case ds2 of wild1 {
                        [] -> GHC.List.repeat @ a x
                        : ipv ipv1
                        -> let {
                             a2 :: GHC.Integer.Type.Integer
                             = case GHC.List.$wlenAcc @ a wild 0 of ww2 {
                                 DEFAULT -> GHC.Integer.Type.smallInteger (GHC.Prim.-# ww2 1)
                                 (-9223372036854775808)
                                 -> case GHC.Enum.$fEnumInt1 ret_ty GHC.Integer.Type.Integer of {} }
                           } in
                           letrec {
                             go :: randomGen -> [a] {- Arity: 1, Strictness: <L,U> -}
                             = \ g2 :: randomGen ->
                               case System.Random.$wrandomIvalInteger
                                      @ randomGen
                                      @ GHC.Types.Int
                                      $dRandomGen
                                      GHC.Num.$fNumInt
                                      ToolShed.System.Random.generateSelection_a3
                                      a2
                                      g2 of ww2 { (#,#) ww3 ww4 ->
                               case ww3 of x1 { GHC.Types.I# ipv2 ->
                               GHC.Types.: @ a (GHC.List.$w!! @ a wild ipv2) (go ww4) } }
                           } in
                           go ds } }) -}
4aac93f6c6ee3c090bd2a53c58e688a8
  generateSelection1 :: [a]
  {- Strictness: b -}
8278b19674e1428729a9dd85fc637661
  generateSelectionFromBounded ::
    (System.Random.RandomGen randomGen, GHC.Enum.Bounded a,
     System.Random.Random a) =>
    randomGen -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,U(1*U,1*U)><S(LLC(C(S))LLL),1*U(A,A,1*C1(C1(U)),A,A,A)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ randomGen
                   @ a
                   $dRandomGen :: System.Random.RandomGen randomGen
                   $dBounded :: GHC.Enum.Bounded a
                   $dRandom :: System.Random.Random a ->
                 System.Random.randomRs
                   @ a
                   $dRandom
                   @ randomGen
                   $dRandomGen
                   (GHC.Enum.minBound @ a $dBounded,
                    GHC.Enum.maxBound @ a $dBounded)) -}
2f236bac8e1e62f72b4b949a24104c0d
  generateSelection_a3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
39fd7aec337425cc20d97cdb92465c0c
  randomGens ::
    System.Random.RandomGen randomGen => randomGen -> [randomGen]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(A,A,C(U(U,U)))><L,U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ randomGen
                   w :: System.Random.RandomGen randomGen
                   w1 :: randomGen ->
                 case ToolShed.System.Random.$wrandomGens
                        @ randomGen
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ randomGen ww1 ww2 }) -}
6fd2696a4d8abcbf84b2aaf93576a7c6
  select ::
    System.Random.RandomGen randomGen => randomGen -> [a] -> a
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ randomGen
                   @ a
                   $dRandomGen :: System.Random.RandomGen randomGen
                   randomGen1 :: randomGen
                   eta :: [a] ->
                 case ToolShed.System.Random.generateSelection
                        @ randomGen
                        @ a
                        $dRandomGen
                        randomGen1
                        eta of wild {
                   [] -> GHC.List.badHead @ a : x ds1 -> x }) -}
e84f0b2fcfa49171a11d1baee2779879
  shuffle ::
    System.Random.RandomGen randomGen => randomGen -> [a] -> [a]
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U,U)),A)><L,U><S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

