
==================== FINAL INTERFACE ====================
2018-03-09 08:08:54.085813 UTC

interface tools_3VVSfwRhtQOBrJAbe7B7f3:ToolShed.Data.List 7103
  interface hash: 508fe31d42f58f909785164ee84c8c6e
  ABI hash: 7693318bf09406315c8e4e8d2c059b3c
  export-list hash: bd2a249ea7a0b14aee2c3141fc9ec46c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9870f41b8ad9b30ee93550d6a576396c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ToolShed.Data.List.chunk
  ToolShed.Data.List.equalityBy
  ToolShed.Data.List.excise
  ToolShed.Data.List.findConvergence
  ToolShed.Data.List.findConvergenceBy
  ToolShed.Data.List.linearise
  ToolShed.Data.List.merge
  ToolShed.Data.List.mergeBy
  ToolShed.Data.List.nub'
  ToolShed.Data.List.permutations
  ToolShed.Data.List.permutationsBy
  ToolShed.Data.List.showListWith
  ToolShed.Data.List.takeUntil
  ToolShed.Data.List.ChunkLength
  ToolShed.Data.List.Matches
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Control.Arrow ab7f126fed349de468f94ac777dc8f4e
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet d2abc1f8d428a81f589c08cc12b5ac66
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base 1f17a6ac4041885657221fa1da43d8b6
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set 7116dff3002cb8f8fc1c63ac63f4ea50
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base e94d20329e6707c26460899044ee8ac3
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
3d6148432537a1fbbf52598af1559b65
  $wchunk :: GHC.Prim.Int# -> [a] -> [[a]]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a ww :: GHC.Prim.Int# w :: [a] ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww 0) of wild {
                   GHC.Types.False
                   -> let {
                        lvl3 :: GHC.Types.Bool
                        = GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# ww 0)
                      } in
                      letrec {
                        chunk' :: forall a1. [a1] -> [[a1]]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ @ a1 ds :: [a1] ->
                          case ds of wild1 {
                            [] -> GHC.Types.[] @ [a1]
                            : ipv ipv1
                            -> let {
                                 x :: ([a1], [a1])
                                 = case lvl3 of wild2 {
                                     GHC.Types.False
                                     -> case ww of ds1 {
                                          DEFAULT
                                          -> let {
                                               ds2 :: ([a1], [a1])
                                               = case GHC.List.splitAt_$s$wsplitAt'
                                                        @ a1
                                                        (GHC.Prim.-# ds1 1)
                                                        ipv1 of ww1 { (#,#) ww2 ww3 ->
                                                 (ww2, ww3) }
                                             } in
                                             (GHC.Types.:
                                                @ a1
                                                ipv
                                                (case ds2 of wild3 { (,) xs' xs'' -> xs' }),
                                              case ds2 of wild3 { (,) xs' xs'' -> xs'' })
                                          1 -> (GHC.Types.: @ a1 ipv (GHC.Types.[] @ a1), ipv1) }
                                     GHC.Types.True -> (GHC.Types.[] @ a1, wild1) }
                               } in
                               GHC.Types.:
                                 @ [a1]
                                 (case x of wild2 { (,) x1 y -> x1 })
                                 (case x of wild2 { (,) x1 y -> chunk' @ a1 y }) }
                      } in
                      chunk' @ a w
                   GHC.Types.True -> ToolShed.Data.List.chunk1 @ a ww }) -}
0829e6072309c0ce7e3b8e3bd060d56a
  $wexcise :: GHC.Prim.Int# -> [a] -> [a]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ @ a ww :: GHC.Prim.Int# w :: [a] ->
                 case ww of ds {
                   DEFAULT
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ds 0) of wild1 {
                        GHC.Types.False
                        -> case w of wild {
                             [] -> ToolShed.Data.List.excise1 @ a
                             : ipv ipv1
                             -> case ds of ds1 {
                                  DEFAULT
                                  -> let {
                                       ds2 :: ([a], [a])
                                       = case GHC.List.splitAt_$s$wsplitAt'
                                                @ a
                                                (GHC.Prim.-# ds1 1)
                                                ipv1 of ww1 { (#,#) ww2 ww3 ->
                                         (ww2, ww3) }
                                     } in
                                     GHC.Base.++
                                       @ a
                                       (GHC.Types.:
                                          @ a
                                          ipv
                                          (case ds2 of wild2 { (,) xs' xs'' -> xs' }))
                                       (case ds2 of wild2 { (,) xs' xs'' ->
                                        case xs'' of wild4 {
                                          [] -> GHC.List.scanl2 @ a : ds4 xs -> xs } })
                                  1
                                  -> GHC.Base.++
                                       @ a
                                       (GHC.Types.: @ a ipv (GHC.Types.[] @ a))
                                       (case ipv1 of wild2 {
                                          [] -> GHC.List.scanl2 @ a : ds2 xs -> xs }) } }
                        GHC.Types.True
                        -> GHC.Base.++
                             @ a
                             (GHC.Types.[] @ a)
                             (case w of wild { [] -> GHC.List.scanl2 @ a : ds1 xs -> xs }) }
                   0 -> GHC.List.tail @ a w }) -}
1433e37dc373b4d8e48513601d5d36dc
  $wshowListWithChar ::
    GHC.Show.Show element =>
    GHC.Types.Char
    -> GHC.Types.Char -> GHC.Types.Char -> [element] -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U),A,A)><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ element
                   w :: GHC.Show.Show element
                   ww :: GHC.Types.Char
                   ww1 :: GHC.Types.Char
                   ww2 :: GHC.Types.Char ->
                 let {
                   a :: [GHC.Types.Char] -> [GHC.Types.Char] {- Arity: 1 -}
                   = GHC.Types.: @ GHC.Types.Char ww
                 } in
                 let {
                   ds :: GHC.Base.String -> GHC.Base.String {- Arity: 1 -}
                   = GHC.Types.: @ GHC.Types.Char ww1
                 } in
                 let {
                   a1 :: element -> GHC.Show.ShowS
                   = GHC.Show.showsPrec @ element w GHC.Show.shows18
                 } in
                 letrec {
                   go :: [GHC.Base.String -> GHC.Base.String] -> GHC.Show.ShowS
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ ds1 :: [GHC.Base.String -> GHC.Base.String]
                       eta :: GHC.Base.String ->
                     case ds1 of wild {
                       [] -> GHC.Types.: @ GHC.Types.Char ww2 eta
                       : y ys -> y (go ys eta) }
                 } in
                 \ x :: [element] ->
                 go
                   (GHC.Types.:
                      @ (GHC.Base.String -> GHC.Base.String)
                      a
                      (case GHC.Base.map
                              @ element
                              @ (GHC.Base.String -> GHC.Base.String)
                              a1
                              x of wild {
                         [] -> GHC.Types.[] @ (GHC.Base.String -> GHC.Base.String)
                         : x1 xs
                         -> GHC.Types.:
                              @ (GHC.Base.String -> GHC.Base.String)
                              x1
                              (Data.OldList.prependToAll
                                 @ (GHC.Base.String -> GHC.Base.String)
                                 ds
                                 xs) }))) -}
ebc9f9e1b1517b54331efaaa03cad67e
  $wshowListWithString ::
    GHC.Show.Show element =>
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [element]
    -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U),A,A)><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ element
                   w :: GHC.Show.Show element
                   ww :: GHC.Base.String
                   ww1 :: GHC.Base.String
                   ww2 :: GHC.Base.String ->
                 let {
                   a :: [GHC.Types.Char] -> [GHC.Types.Char] {- Arity: 1 -}
                   = GHC.Base.++ @ GHC.Types.Char ww
                 } in
                 let {
                   ds :: GHC.Base.String -> GHC.Base.String {- Arity: 1 -}
                   = GHC.Base.++ @ GHC.Types.Char ww1
                 } in
                 let {
                   a1 :: element -> GHC.Show.ShowS
                   = GHC.Show.showsPrec @ element w GHC.Show.shows18
                 } in
                 letrec {
                   go :: [GHC.Base.String -> GHC.Base.String] -> GHC.Show.ShowS
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ ds1 :: [GHC.Base.String -> GHC.Base.String]
                       eta :: GHC.Base.String ->
                     case ds1 of wild {
                       [] -> GHC.Base.++ @ GHC.Types.Char ww2 eta
                       : y ys -> y (go ys eta) }
                 } in
                 \ x :: [element] ->
                 go
                   (GHC.Types.:
                      @ (GHC.Base.String -> GHC.Base.String)
                      a
                      (case GHC.Base.map
                              @ element
                              @ (GHC.Base.String -> GHC.Base.String)
                              a1
                              x of wild {
                         [] -> GHC.Types.[] @ (GHC.Base.String -> GHC.Base.String)
                         : x1 xs
                         -> GHC.Types.:
                              @ (GHC.Base.String -> GHC.Base.String)
                              x1
                              (Data.OldList.prependToAll
                                 @ (GHC.Base.String -> GHC.Base.String)
                                 ds
                                 xs) }))) -}
a74d6968330444704689f71766a08a17
  type ChunkLength = GHC.Types.Int
2497ffd1e6103f6a37736a05bf23b9ea
  type Matches a = a -> a -> GHC.Types.Bool
8bbcd1050f547200d80be027ee9e5da3
  chunk :: ToolShed.Data.List.ChunkLength -> [a] -> [[a]]
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a w :: ToolShed.Data.List.ChunkLength w1 :: [a] ->
                 case w of ww { GHC.Types.I# ww1 ->
                 ToolShed.Data.List.$wchunk @ a ww1 w1 }) -}
c17214362fa01528f61ae0defc206355
  chunk1 :: GHC.Prim.Int# -> [[a]]
  {- Arity: 1, Strictness: <L,U>b -}
db7962da4b4715f0adc083a263bbb500
  equalityBy ::
    GHC.Classes.Eq b => (a -> b) -> ToolShed.Data.List.Matches a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,C(U)><L,U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a @ b $dEq :: GHC.Classes.Eq b f :: a -> b x :: a y :: a ->
                 GHC.Classes.== @ b $dEq (f x) (f y)) -}
c17f372993d9f5d3a663d95948ad70df
  excise :: GHC.Types.Int -> [a] -> [a]
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a w :: GHC.Types.Int w1 :: [a] ->
                 case w of ww { GHC.Types.I# ww1 ->
                 ToolShed.Data.List.$wexcise @ a ww1 w1 }) -}
fa3e4271cbabbc481a30c4daabd88a63
  excise1 :: [a]
  {- Unfolding: (\ @ a ->
                 GHC.Base.++ @ a (GHC.Types.[] @ a) (GHC.List.scanl2 @ a)) -}
5423779fc1281bd14c3f4de5a0d8a67a
  findConvergence :: GHC.Classes.Eq a => [a] -> a
  {- Arity: 2, Strictness: <L,1*U(1*C(C1(U)),A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a $dEq :: GHC.Classes.Eq a eta :: [a] ->
                 ToolShed.Data.List.findConvergenceBy
                   @ a
                   (GHC.Classes.== @ a $dEq)
                   eta) -}
e998fd8853755942b95485382184497b
  findConvergenceBy :: ToolShed.Data.List.Matches a -> [a] -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a ds :: ToolShed.Data.List.Matches a ds1 :: [a] ->
                 case ds1 of wild {
                   [] -> ToolShed.Data.List.findConvergenceBy3 @ a
                   : ds2 ds3
                   -> case ds3 of wild1 {
                        [] -> ToolShed.Data.List.findConvergenceBy2 @ a
                        : ipv ipv1
                        -> case GHC.List.dropWhile
                                  @ (a, a)
                                  (\ x :: (a, a) ->
                                   case ds
                                          (case x of wild2 { (,) x1 ds4 -> x1 })
                                          (case x of wild2 { (,) ds4 y -> y }) of wild2 {
                                     GHC.Types.False -> GHC.Types.True
                                     GHC.Types.True -> GHC.Types.False })
                                  (GHC.List.zip
                                     @ a
                                     @ a
                                     (GHC.List.init1 @ a ds2 wild1)
                                     wild1) of wild2 {
                             [] -> ToolShed.Data.List.findConvergenceBy1 @ a
                             : ds4 ds5 -> case ds4 of wild3 { (,) x ds6 -> x } } } }) -}
31809f6a54d8f2db32977c2d9fe48324
  findConvergenceBy1 :: a
  {- Strictness: b -}
6886929460de50ddbc037259de583d49
  findConvergenceBy2 :: a
  {- Strictness: b -}
2817c3ac8003ef8da21fd4c0b355c53c
  findConvergenceBy3 :: a
  {- Strictness: b -}
d565b37a881cd204bea8c7a7067d72ed
  linearise :: [(a, a)] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9c914d04c7415997204915e5e847cfa5
  merge :: GHC.Classes.Ord a => [a] -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a $dOrd :: GHC.Classes.Ord a eta :: [a] eta1 :: [a] ->
                 ToolShed.Data.List.mergeBy
                   @ a
                   (GHC.Classes.compare @ a $dOrd)
                   eta
                   eta1) -}
ffe771116c285ee2135cbd4ace228a99
  mergeBy :: (a -> a -> GHC.Types.Ordering) -> [a] -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   cmp :: a -> a -> GHC.Types.Ordering
                   eta :: [a]
                   eta1 :: [a] ->
                 letrec {
                   slave :: [a] -> [a] -> [a]
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ l :: [a] r :: [a] ->
                     case l of wild {
                       [] -> r
                       : x xs
                       -> case r of wild1 {
                            [] -> wild
                            : y ys
                            -> case cmp x y of wild2 {
                                 DEFAULT -> GHC.Types.: @ a x (slave xs wild1)
                                 GHC.Types.GT -> GHC.Types.: @ a y (slave wild ys) } } }
                 } in
                 slave eta eta1) -}
e11a1ed0bd1100f17d78ea48c8761cc1
  nub' :: GHC.Classes.Ord a => [a] -> [a]
  {- Arity: 2,
     Strictness: <L,U(A,C(C1(U)),A,A,A,C(C1(U)),A,A)><S,1*U>,
     Inline: NOINLINE -}
6aa85aa813676e6b69b01e4dd3e1c743
  nubWithInt :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: [GHC.Types.Int] ->
                 GHC.Base.build
                   @ Data.IntSet.Base.Key
                   (\ @ b
                      c :: Data.IntSet.Base.Key -> b -> b[OneShot]
                      n :: b[OneShot] ->
                    Data.IntSet.Base.foldrFB
                      @ b
                      c
                      n
                      (Data.IntSet.Base.fromList_go Data.IntSet.Base.Nil x))) -}
c3ed33f734d54529d8bb3ffb4583b687
  permutations :: [[a]] -> [[a]]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a ->
                 ToolShed.Data.List.permutationsBy
                   @ a
                   (ToolShed.Data.List.permutations1 @ a)) -}
edc9c852024f2fda00ce88fba0664956
  permutations1 :: a -> a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a ds :: a ds1 :: a -> GHC.Types.True) -}
e202f84abdffa990a33b6a9b4ad9e132
  permutationsBy :: ToolShed.Data.List.Matches a -> [[a]] -> [[a]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C(U))><S,U>,
     Unfolding: (\ @ a
                   matches :: ToolShed.Data.List.Matches a
                   lists :: [[a]] ->
                 case (ToolShed.Data.List.permutationsBy2 @ a lists)
                        `cast`
                      (Data.Monoid.NTCo:Any[0]) of wild {
                   GHC.Types.False
                   -> letrec {
                        slave :: [[a]] -> [[a]] {- Arity: 1, Strictness: <S,1*U> -}
                        = \ ds :: [[a]] ->
                          case ds of wild1 {
                            [] -> ToolShed.Data.List.permutationsBy1 @ a
                            : xs xss
                            -> letrec {
                                 go :: [a] -> [[a]] {- Arity: 1, Strictness: <S,1*U> -}
                                 = \ ds1 :: [a] ->
                                   case ds1 of wild2 {
                                     [] -> GHC.Types.[] @ [a]
                                     : y ys
                                     -> let {
                                          z :: [[a]] = go ys
                                        } in
                                        letrec {
                                          go1 :: [[a]] -> [[a]] {- Arity: 1, Strictness: <S,1*U> -}
                                          = \ ds2 :: [[a]] ->
                                            case ds2 of wild3 {
                                              [] -> z
                                              : y1 ys1
                                              -> GHC.Types.:
                                                   @ [a]
                                                   (GHC.Types.: @ a y y1)
                                                   (go1 ys1) }
                                        } in
                                        go1
                                          (slave
                                             (GHC.Base.map
                                                @ [a]
                                                @ [a]
                                                (GHC.List.filter @ a (matches y))
                                                xss)) }
                               } in
                               go xs }
                      } in
                      slave lists
                   GHC.Types.True -> GHC.Types.[] @ [a] }) -}
98bb54bf8f33ea48069ece5c0ea7ed16
  permutationsBy1 :: [[a]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Types.: @ [a] (GHC.Types.[] @ a) (GHC.Types.[] @ [a])) -}
ca65ead8e375bb25dff56fdb1a3e4ec2
  permutationsBy2 :: [[a]] -> Data.Monoid.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
24754d4636fe36da01b42826eba17852
  showListWith ::
    (GHC.Show.Show token, GHC.Show.Show element) =>
    (token, token, token) -> [element] -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,1*U(1*C1(U),A,A)><S,1*U(U,U,U)>,
     Inline: NOINLINE -}
47e08906669cfbd0deda28f1f8b9ec4c
  showListWithChar ::
    GHC.Show.Show element =>
    (GHC.Types.Char, GHC.Types.Char, GHC.Types.Char)
    -> [element] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U),A,A)><S,1*U(U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ element
                   w :: GHC.Show.Show element
                   w1 :: (GHC.Types.Char, GHC.Types.Char, GHC.Types.Char) ->
                 case w1 of ww { (,,) ww1 ww2 ww3 ->
                 ToolShed.Data.List.$wshowListWithChar @ element w ww1 ww2 ww3 }) -}
b0b807481081d82861d0ee76ca1efd9a
  showListWithString ::
    GHC.Show.Show element =>
    (GHC.Base.String, GHC.Base.String, GHC.Base.String)
    -> [element] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(U),A,A)><S,1*U(U,U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ element
                   w :: GHC.Show.Show element
                   w1 :: (GHC.Base.String, GHC.Base.String, GHC.Base.String) ->
                 case w1 of ww { (,,) ww1 ww2 ww3 ->
                 ToolShed.Data.List.$wshowListWithString
                   @ element
                   w
                   ww1
                   ww2
                   ww3 }) -}
1fc1d8b3d1b6308810be13e91f666fe3
  takeUntil :: (a -> GHC.Types.Bool) -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a predicate :: a -> GHC.Types.Bool eta :: [a] ->
                 letrec {
                   takeUntil' :: [a] -> [a] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [a] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ a
                       : x xs
                       -> GHC.Types.:
                            @ a
                            x
                            (case predicate x of wild1 {
                               GHC.Types.False -> takeUntil' xs
                               GHC.Types.True -> GHC.Types.[] @ a }) }
                 } in
                 takeUntil' eta) -}
"nub'/Int" [ALWAYS] forall $dOrd :: GHC.Classes.Ord GHC.Types.Int
  ToolShed.Data.List.nub' @ GHC.Types.Int $dOrd
  = ToolShed.Data.List.nubWithInt
"showListWith/Char" [ALWAYS] forall @ element
                                    $dShow :: GHC.Show.Show GHC.Types.Char
                                    $dShow1 :: GHC.Show.Show element
  ToolShed.Data.List.showListWith @ GHC.Types.Char
                                  @ element
                                  $dShow
                                  $dShow1
  = ToolShed.Data.List.showListWithChar @ element $dShow1
"showListWith/String" [ALWAYS] forall @ element
                                      $dShow :: GHC.Show.Show GHC.Base.String
                                      $dShow1 :: GHC.Show.Show element
  ToolShed.Data.List.showListWith @ [GHC.Types.Char]
                                  @ element
                                  $dShow
                                  $dShow1
  = ToolShed.Data.List.showListWithString @ element $dShow1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

